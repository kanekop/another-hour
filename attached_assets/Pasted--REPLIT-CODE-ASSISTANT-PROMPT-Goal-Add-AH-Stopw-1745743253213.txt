############################################
#  REPLIT CODE ASSISTANT PROMPT
#  Goal: Add AH Stopwatch & AH Timer to an
#  existing Another-Hour clock project.
############################################

### CURRENT PROJECT TREE
project/
├─ public/
│  ├─ admin.css  admin.html  admin.js
│  ├─ clock-core.js
│  ├─ index.html  main.js  style.css
├─ server.js
├─ settings.json
└─ package.json

### TARGET FEATURES
1. AH Stopwatch (runs 1.04× faster → 1 AH s = 0.96 real s)
2. AH Timer    (same speed conversion)
The original clock must keep working.

### REQUIRED CHANGES
#### A.  File re-organisation
Move/rename as shown:

public/
  css/            style.css, admin.css
  js/             clock-ui.js   (from main.js)
                  stopwatch-ui.js   ← new
                  timer-ui.js       ← new
  pages/          index.html
                  stopwatch.html    ← new
                  timer.html        ← new
src/
  shared/ah-time.js          ← new core conversion lib
  routes/clock.js            ← extract from server.js
  routes/stopwatch.js        ← new
  routes/timer.js            ← new
settings/clock.json          ← move settings.json here
tests/                       ← add unit tests

#### B.  Core library (src/shared/ah-time.js)
js
const AH_FACTOR = 0.96;
export const toAhMillis   = realMs => realMs / AH_FACTOR;
export const fromAhMillis = ahMs   => ahMs * AH_FACTOR;
```

#### C.  Update clock-ui.js to import **fromAhMillis**.

#### D.  Stopwatch UI
* stopwatch.html loads stopwatch-ui.js.  
* JS logic: on “Start”, record `startReal = Date.now()`.  
  Poll `/api/stopwatch/elapsed?start=<startReal>` every 250 ms and render AH elapsed time (HH:MM:SS.s).

#### E.  Timer UI
* timer.html with an input for AH duration.  
* JS converts AH duration → real ms via **fromAhMillis**, counts down locally, alert when zero.

#### F.  Express routes
js
// src/routes/stopwatch.js
import express from 'express';
import { toAhMillis } from '../shared/ah-time.js';
const router = express.Router();
router.get('/elapsed', (req, res) => {
  const start = Number(req.query.start);
  res.json({ elapsedAh: toAhMillis(Date.now() - start) });
});
export default router;
```
Create a similar route for timer.

#### G.  server.js (switch to ES modules)
* `"type": "module"` in package.json  
* `app.use('/api/stopwatch', stopwatchRouter);`  
* `app.use('/api/timer', timerRouter);`  
* `app.use('/shared', express.static('src/shared'));`  → allows browser imports.

#### H.  Dev tooling
* Add **nodemon** + **concurrently** for hot re-load.  
* `npm run dev` starts backend and a simple live-server for `public/`.

#### I.  Tests
* tests/ah-time.test.js – verify `fromAhMillis(toAhMillis(60000))` ≈ 60000 (±1 ms).

#### J.  README
Update with install / dev / deploy steps.

### IMPLEMENTATION NOTES
* Plain Vanilla JS is fine; no React needed.
* Styling can stay as-is; feel free to use basic Tailwind classes if convenient.
* Precision tolerance: ±0.1 s drift over 10 minutes.
* Commit in logical steps: refactor → shared lib → stopwatch → timer → tests → docs.
* Ensure `npm test` passes before finishing.

### OUTPUT EXPECTATION
Deliver the refactored codebase with all new files, passing tests, and a brief summary of key commands (run, build, deploy).

