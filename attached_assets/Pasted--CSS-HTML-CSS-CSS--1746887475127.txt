現在のプロジェクトのCSSの構成をリファクタリングしてください。目的は、HTMLファイル内のインラインスタイルを外部CSSファイルに移行し、CSSの管理を一元化して可読性とメンテナンス性を向上させることです。

リファクタリング方針は以下の通りです。

1.  **既存のグローバルCSSファイルとその役割:**
    * `public/style.css`: アプリケーション全体の基本的なスタイル（bodyのデフォルト、基本的なボタン、フォントなど、全ページで共通する可能性のある最小限のスタイル）を定義するファイルとします。
    * `public/css/`: このディレクトリにページ固有およびコンポーネント固有のCSSファイルを格納します。

2.  **新しいCSSファイルの作成とインラインスタイルの移行:**
    * **`public/css/world-clock.css` (新規作成):**
        * `public/pages/world-clock.html` 内の `<style>` タグに記述されている全てのCSSルールを、この新しいファイルに移動してください。
        * `public/pages/world-clock.html` の `<head>` 内から、このファイルを `<link rel="stylesheet" href="/css/world-clock.css">` のようにして読み込むように変更してください。元の `<style>` タグは削除してください。
    * **`public/css/stopwatch.css` (新規作成):**
        * `public/pages/stopwatch.html` 内の `<style>` タグに記述されている全てのCSSルールを、この新しいファイルに移動してください。
        * `public/pages/stopwatch.html` の `<head>` 内から、このファイルを `<link rel="stylesheet" href="/css/stopwatch.css">` のようにして読み込むように変更してください。元の `<style>` タグは削除してください。
    * **`public/css/timer.css` (新規作成):**
        * `public/pages/timer.html` 内の `<style>` タグに記述されている全てのCSSルールを、この新しいファイルに移動してください。
        * `public/pages/timer.html` の `<head>` 内から、このファイルを `<link rel="stylesheet" href="/css/timer.css">` のようにして読み込むように変更してください。元の `<style>` タグは削除してください。
    * **`public/css/main-clock.css` (新規作成):**
        * 現在の `public/style.css` の内容のうち、`index.html` のメインアナログ時計に特有のスタイル（例: `.face`, `.hand`, `.second`, `.center`, `.tick`, `.ah-sector` など、メインの大きな時計盤に関連するクラス）を、この新しいファイルに移動してください。
        * `public/index.html` の `<head>` 内で、既存の `public/style.css` へのリンクに加えて、この新しいファイルも `<link rel="stylesheet" href="/css/main-clock.css">` のようにして読み込むように変更してください。
    * **`public/css/admin.css` (既存ファイルの移動と更新):**
        * 現在の `public/admin.css` を `public/css/admin.css` に移動してください。
        * `public/admin.html` の `<head>` 内で、CSSファイルのリンクパスを `/css/admin.css` に更新してください。
    * **`public/css/components.css` (新規作成 - 発展的):**
        * 上記の各ページ専用CSSファイル (`world-clock.css`, `stopwatch.css`, `timer.css`, `main-clock.css`) の中で、複数のページやコンポーネントで共通して使用できるスタイル（例: ボタンのスタイル、基本的なカードレイアウト、デジタル表示部分の共通スタイルなど）があれば、それらをこの `components.css` ファイルに集約してください。
        * この `components.css` ファイルは、関連する全てのHTMLファイル（`index.html`, `admin.html`, `pages/*.html`）から `<link rel="stylesheet" href="/css/components.css">` のようにして読み込むようにしてください。これは他のCSSファイルよりも先に読み込むのが適切かもしれません。

3.  **`public/style.css` (ルート直下) の役割変更:**
    * 上記 `main-clock.css` へのスタイル移動後、`public/style.css` には、アプリケーション全体に適用される本当に基本的なスタイル（例: `body` のマージン、デフォルトフォント、背景色、基本的な色の変数など）のみが残るように整理してください。

4.  **HTMLファイルからのCSSリンクの順序:**
    * 各HTMLファイルでCSSを読み込む際は、以下の順序を推奨します。
        1.  `public/style.css` (グローバル基本スタイル)
        2.  `public/css/components.css` (共通コンポーネントスタイル)
        3.  各ページ専用のCSSファイル (例: `public/css/world-clock.css`)

**期待される成果物:**

* `public/pages/` ディレクトリ内の全HTMLファイルから `<style>` タグが除去されていること。
* `public/css/` ディレクトリ内に、`world-clock.css`, `stopwatch.css`, `timer.css`, `main-clock.css`, `admin.css`, `components.css` が作成（または移動・更新）されていること。
* 各HTMLファイルが、必要なCSSファイルを正しく `<link>` タグで読み込んでいること。
* `public/style.css` がグローバルな基本スタイルのみを含むように整理されていること。
* リファクタリング後も、各ページの見た目やレイアウトが以前と変わらないこと（スタイルの適用が維持されていること）。

**作業対象ファイル:**

* `public/style.css`
* `public/admin.css`
* `public/index.html`
* `public/admin.html`
* `public/pages/world-clock.html`
* `public/pages/stopwatch.html`
* `public/pages/timer.html`
* (新規作成) `public/css/world-clock.css`
* (新規作成) `public/css/stopwatch.css`
* (新規作成) `public/css/timer.css`
* (新規作成) `public/css/main-clock.css`
* (新規作成) `public/css/components.css`

このリファクタリング作業を、現在のプロジェクトファイル構造に対して実行してください。